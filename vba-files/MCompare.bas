Attribute VB_Name = "MCompare"
'namespace=vba-files\

Option Explicit

''''''''''''''''''''''''''
''공용변수부
'소스 규모가 작으니 매개변수보다는 전역변수 활용 (Private)
''''''''''''''''''''''''''

Private 구분자 As String 'Delimiter

Private 문자열_변경전 As String 'aStr
Private 문자열_변경후 As String 'bStr

Private 어절수_문자열_변경전 As Integer 'High '없으면 0. 있으면 최소한 1
Private 어절수_문자열_변경후 As Integer 'UBound(bWords) '없으면 0. 있으면 최소한 1

Private 위치_행 As Integer 'r '1 To
Private 위치_열 As Integer 's '1 To
Private 범위_행 As Integer
Private 범위_열 As Integer

Private 작업시작행 As Integer

Private 위치_변경전 As Range
Private 위치_변경후 As Range
Private 위치_출력 As Range 'outCell

''''''''''''''''''
Private 위치_출력_특별 As Range '이수우CPA 요청으로 추가. 각 행별로 신규/삭제/변경/NA 표시목적
''''''''''''''''''

Private 문자열_작업결과 As String 'strResult

'모든 배열은 헷갈리지 않게 1 시작하며, 동적배열변수를 활용함 (해당이 없어서 선언되지 않았을 경우는 Not으로 -1 반환하는 특성 활용)

Private 배열_삭제된문자열_시작위치() As Variant 'olStart '삭제된(취소선그을) 문자열의 시작위치를 저장하는 배열
Private 배열_삭제된문자열_길이() As Variant 'olLength '삭제된(취소선그을) 문자열 별 길이를 저장하는 배열
Private 배열_추가된문자열_시작위치() As Variant 'nwStart '추가된(밑줄대상) 문자열의 시작위치를 저장하는 배열
Private 배열_추가된문자열_길이() As Variant 'nwLength '추가된(밑줄대상) 문자열 별 길이를 저장하는 배열
'2차배열은 1차원 갯수를 바꿀수 없어서... 부득이 다른 배열 사용

Private 배열_문자열_변경전 As Variant 'aWords
Private 배열_문자열_변경후 As Variant 'bWords

Private 배열_문자열_작업결과() As Variant 'outWords

Private 어절_문자열_변경전 As String 'aWord
Private 어절_문자열_변경후 As String 'bWord

'Cell에 공백이 있을 수 있으므로 아래 Boolean을 활용
Private 존재여부_문자열_변경전 As Boolean
Private 존재여부_문자열_변경후 As Boolean
Private 존재여부_삭제된문자열 As Boolean
Private 존재여부_추가된문자열 As Boolean
Private 존재여부_문자열_작업결과 As Boolean

Private 어절순번_문자열_변경전 As Long 'aPoint '1 To
Private 어절순번_문자열_변경후 As Long 'bPoint '1 To
Private 어절순번_문자열_작업결과 As Long 'outPoint ' 1 To

Private 어절순번_삭제된문자열 As Long 'oldPoint
Private 어절순번_추가된문자열 As Long 'newPoint

Private 일치하는위치 As Variant 'matchPoint

Private 글자수_작업결과 As Long 'outLength



'이 Module을 테일러링해서 사용하면 됨

''''''''''''''''''''''''''
'Main
''''''''''''''''''''''''''


Public Sub CompareMain()

    ''''''
    '초기화
    ''''''
    구분자 = " "        

    범위_행 = ActiveSheet.UsedRange.Rows(ActiveSheet.UsedRange.Rows.Count).Row
    범위_열 = 2
    
    작업시작행 = 2
    
    
    For 위치_행 = 작업시작행 To 범위_행
    
        For 위치_열 = 1 To 범위_열

            '초기화
            문자열_변경전 = Cells(위치_행, 위치_열).Value
            문자열_변경후 = Cells(위치_행, 위치_열 + 범위_열).Value '가로배열 상정
            
            '문자열_변경전 전처리 : 배열화, Boolean설정, 어절수 계산
            If Len(문자열_변경전) = 0 Then
                존재여부_문자열_변경전 = False
                어절수_문자열_변경전 = 0 '이 경우는 UBound 결과가 -1로 나오므로 왜곡됨. 따로 처리하고 Boolean을 활용함
            Else
                존재여부_문자열_변경전 = True
                배열_문자열_변경전 = Split(문자열_변경전, 구분자)
                ReDim Preserve 배열_문자열_변경전(1 To UBound(배열_문자열_변경전) + 1)
                어절수_문자열_변경전 = UBound(배열_문자열_변경전)
            End If
            
            '문자열_변경후 전처리 : 배열화, Boolean설정, 어절수 계산
            If Len(문자열_변경후) = 0 Then
                존재여부_문자열_변경후 = False
                어절수_문자열_변경후 = 0 '이 경우는 UBound 결과가 -1로 나오므로 왜곡됨. 따로 처리하고 Boolean을 활용함
            Else
                존재여부_문자열_변경후 = True
                배열_문자열_변경후 = Split(문자열_변경후, 구분자)
                ReDim Preserve 배열_문자열_변경후(1 To UBound(배열_문자열_변경후) + 1)
                어절수_문자열_변경후 = UBound(배열_문자열_변경후)
            End If
            
            
            '일단 없다고 상정하고 시작함.
            존재여부_삭제된문자열 = False
            존재여부_추가된문자열 = False
            존재여부_문자열_작업결과 = False
            
            Set 위치_변경전 = Cells(위치_행, 위치_열)
            Set 위치_변경후 = Cells(위치_행, 위치_열 + 1 * 범위_열) 'Debug..!!!!!!!!!!!
            Set 위치_출력 = Cells(위치_행, 위치_열 + 2 * 범위_열) '매개변수를 전역변수로 대체
            
            위치_출력.Clear
            
            '''
            ''' 본 Loop
            '''
            If (어절수_문자열_변경전 + 어절수_문자열_변경후) = 0 Then
                위치_출력.Interior.ColorIndex = 15 '회색칠해버리고 끝냄
            
            '''''''''''''''''''''''''''효율화를 위한 추가 CODE
            '또는, 변경전에만 내용이 없는 경우 (신규)
            ElseIf (어절수_문자열_변경전) = 0 Then
            
                위치_출력.Value = 위치_변경후.Value
                
                With 위치_출력.Font
                    .ColorIndex = 14
                    .Underline = True
                End With
                FlagModify = True 'Debug '행도 셀도 모두 수정임
                Flag수정 = True
            '또는, 변경후에만 내용이 없는 경우 (삭제)
            ElseIf (어절수_문자열_변경후) = 0 Then
            
                위치_출력.Value = 위치_변경전.Value
                
                With 위치_출력.Font
                    .ColorIndex = 3
                    .Strikethrough = True
                End With
                FlagModify = True 'Debug '행도 셀도 모두 수정임
                Flag수정 = True
            '''''''''''''''''''''''''''효율화를 위한 추가 CODE
            
            Else
                Call CompareText '함수1 : 문자열_작업결과를 설정함
                Call DisplayText '함수2 : 분석 결과를 화면에 찍음
            End If
        
        Next 위치_열
        
    Next 위치_행
    
    
End Sub

''''''''''''''''''''''''''
'비교해서 전역변수에 쌓는 Sub
''''''''''''''''''''''''''


Private Sub CompareText() '전역변수 활용
  

    '이 루프에 들어온것 자체가 작업대상이 있는 것임
    ReDim 배열_문자열_작업결과(1 To (어절수_문자열_변경전 + 어절수_문자열_변경후)) '최소한 1개
    존재여부_문자열_작업결과 = True 'Redim에는 Boolean 대입을 붙임

    어절순번_삭제된문자열 = 0
    어절순번_추가된문자열 = 0
    
    글자수_작업결과 = 1 '처음엔 아직 아무것도 넣지 않았으니 0글자이다.
    '1글자로 바꿈. 시작은 1이니까
    
    '배열이 1부터 시작하고, 처음부터 분석해야 하니 1에서 시작한다.
    어절순번_문자열_변경전 = 1
    어절순번_문자열_변경후 = 1
    
    '작업결과는 삭제/추가와 같이 생성시키면서 1씩 더해주도록 한다.
    어절순번_문자열_작업결과 = 0
    
    '무한루프로 구현한다.
    Do
    
        '어절_문자열_변경전 설정 : aWord
        If (존재여부_문자열_변경전 = False) Or (UBound(배열_문자열_변경전) < 어절순번_문자열_변경전) Then
        '변경전 문자열이 존재하지 않거나
        '변경전문자열 배열크기보다 현재 어절순번이 큰 경우 (ex. 0 < 1)
            어절_문자열_변경전 = "" '공백
        Else
            어절_문자열_변경전 = 배열_문자열_변경전(어절순번_문자열_변경전)
        End If
        
        '어절_문자열_변경후 설정 : bWord
        If (존재여부_문자열_변경후 = False) Then
        '변경후 문자열이 존재하지 않거나
        '변경후문자열 배열크기보다 현재 어절순번이 큰 경우 (ex. 0 < 1)
            어절_문자열_변경후 = "" '공백
        ElseIf (UBound(배열_문자열_변경후) < 어절순번_문자열_변경후) Then
            어절_문자열_변경후 = "" '공백
        Else
            어절_문자열_변경후 = 배열_문자열_변경후(어절순번_문자열_변경후)
        End If
        
        '분기1 : 비교대상 두 어절이 동일한 어절인 경우
        If LCase(어절_문자열_변경전) = LCase(어절_문자열_변경후) Then
            
            '문자열_작업결과에 찍는다
            어절순번_문자열_작업결과 = 어절순번_문자열_작업결과 + 1
            ReDim Preserve 배열_문자열_작업결과(1 To 어절순번_문자열_작업결과)
            배열_문자열_작업결과(어절순번_문자열_작업결과) = 어절_문자열_변경전 '어차피 동일하므로 변경전 문자열을 찍음
            글자수_작업결과 = 글자수_작업결과 + 1 + Len(어절_문자열_변경전) '글자수가 늘어남 : 기존글자수 + 1(공백, Join 고려) + 어절_문자열_변경전 글자수
            
            If (존재여부_문자열_변경후 = False) Or (UBound(배열_문자열_변경후) < 어절순번_문자열_변경후) Then
                '만약 변경후 문자열이 없거나 다 떨어졌다면 아무 작업이 필요 없다.
            Else
                배열_문자열_변경후(어절순번_문자열_변경후) = vbNullString '같은 글자를 비워줘야 분기2에서 Match 정상작동?
                
                '가 다 가
                '가 나 => b(1)인 가를 지워주지않으면, a(3)인 가의 Match가 에러(-1)이 아니라 1이 될 것임
                
                '(정상)
                '가 다(삭제) 가(삭제) 나(신규)
                
                '(오류)
                '가 다(삭제) 가 ...
                
            End If
            
            '양쪽 다 다음 어절로
            어절순번_문자열_변경전 = 어절순번_문자열_변경전 + 1
            어절순번_문자열_변경후 = 어절순번_문자열_변경후 + 1
            '변수가 변경됨에 따라 Loop에서 어절_문자열_변경전후는 다시 초기화됨
            
        Else '분기2: 비교대상 두 어절이 동일하지 않은 경우
        
            일치하는위치 = Application.Match(어절_문자열_변경전, 배열_문자열_변경후, 0) '동일한 어절은 삭제된 후의 배열_문자열_변경후에서 찾음
            
            '분기2-1 : 변경전 어절이 변경후 어절에 없는 경우 => 변경전 어절을 "취소선대상"으로 추가함
            If IsError(일치하는위치) Then
                '찍을 준비
                
                If 어절_문자열_변경전 = "" Then
                    Debug.Print 1 '그냥 Pass
                Else
                    어절순번_문자열_작업결과 = 어절순번_문자열_작업결과 + 1
                    ReDim Preserve 배열_문자열_작업결과(1 To 어절순번_문자열_작업결과)
                    배열_문자열_작업결과(어절순번_문자열_작업결과) = 어절_문자열_변경전 '취소대상으로서 변경전 문자열을 찍음
                                    
                    '삭제된문자열이 존재하는지 CHECK. 맨 처음에는 무조건 건드림
                    'If Not (배열_삭제된문자열_시작위치) = -1 Then
                    If 존재여부_삭제된문자열 = False Then
                        ReDim 배열_삭제된문자열_시작위치(1 To 1)
                        ReDim 배열_삭제된문자열_길이(1 To 1)
                        존재여부_삭제된문자열 = True
                    End If
                    
                    어절순번_삭제된문자열 = 어절순번_삭제된문자열 + 1
                    ReDim Preserve 배열_삭제된문자열_시작위치(1 To 어절순번_삭제된문자열)
                    배열_삭제된문자열_시작위치(어절순번_삭제된문자열) = 글자수_작업결과 '취소선 시작할 위치 찍기. 글자는 무조건 0에서 시작
                    
                    어절_문자열_변경전 = 배열_문자열_변경전(어절순번_문자열_변경전)
                    
                    ReDim Preserve 배열_삭제된문자열_길이(1 To 어절순번_삭제된문자열)
                    배열_삭제된문자열_길이(어절순번_삭제된문자열) = Len(어절_문자열_변경전) '취소선 그을 글자수 찍기
                    
                    '위 문장보다 반드시 뒤에 와야 함!!
                    글자수_작업결과 = 글자수_작업결과 + 1 + Len(어절_문자열_변경전) '글자수가 늘어남 : 기존글자수 + 1(공백, Join 고려) + 어절_문자열_변경전 글자수
                End If
                
                어절순번_문자열_변경전 = 어절순번_문자열_변경전 + 1
                '변수가 변경됨에 따라 Loop에서 어절_문자열_변경전후는 다시 초기화됨
                    
            Else '분기2-2 : 변경전 어절이 변경후 어절에 있는 경우
            
                '무한루프. 탈출조건을 중간에 명시.
                Do '루프에서 빠져나갈때 까지 어절순번_문자열_변경후를 1씩 늘려가면서 어절_문자열_변경후를 하나씩 작업결과에 추가해줌(신규대상으로)
                    
                    '루프 탈출조건은, 변경전/변경후 같은 글자를 만났을 때
                    
                    'Debug - 8/25 01:40
                    If UBound(배열_문자열_변경후) < 어절순번_문자열_변경후 Then
                        Exit Do
                    End If
                    
                    If LCase(배열_문자열_변경후(어절순번_문자열_변경후)) = LCase(어절_문자열_변경전) Then
                        Exit Do
                    End If
                    
                    '찍을 준비
                    어절순번_문자열_작업결과 = 어절순번_문자열_작업결과 + 1
                    ReDim Preserve 배열_문자열_작업결과(1 To 어절순번_문자열_작업결과)
                    배열_문자열_작업결과(어절순번_문자열_작업결과) = 어절_문자열_변경후 '추가대상으로서 변경후 문자열을 찍음
                    
                    '추가된문자열이 존재하는지 CHECK. 맨 처음에는 무조건 건드림
                    If 존재여부_추가된문자열 = False Then
                        ReDim 배열_추가된문자열_시작위치(1 To 1)
                        ReDim 배열_추가된문자열_길이(1 To 1)
                        존재여부_추가된문자열 = True
                    End If
                    
                    어절순번_추가된문자열 = 어절순번_추가된문자열 + 1
                    ReDim Preserve 배열_추가된문자열_시작위치(1 To 어절순번_추가된문자열)
                    배열_추가된문자열_시작위치(어절순번_추가된문자열) = 글자수_작업결과 '취소선 시작할 위치 찍기. 글자는 무조건 0에서 시작
                    
                    어절_문자열_변경후 = 배열_문자열_변경후(어절순번_문자열_변경후)
                    
                    ReDim Preserve 배열_추가된문자열_길이(1 To 어절순번_추가된문자열)
                    배열_추가된문자열_길이(어절순번_추가된문자열) = Len(어절_문자열_변경후) '취소선 그을 글자수 찍기
                    
                    '위 문장보다 반드시 뒤에 와야 함!!
                    글자수_작업결과 = 글자수_작업결과 + 1 + Len(어절_문자열_변경후) '글자수가 늘어남 : 기존글자수 + 1(공백, Join 고려) + 어절_문자열_변경전 글자수
                    
                    배열_문자열_변경후(어절순번_문자열_변경후) = vbNullString '같은 글자를 비워줘야 분기2에서 Match 정상작동?
                    
                    어절순번_문자열_변경후 = 어절순번_문자열_변경후 + 1
                    
                    '순번 변경에 따른 변수 업데이트
                    '어절_문자열_변경후 설정
                    If (존재여부_문자열_변경후 = False) Or (UBound(배열_문자열_변경후) < 어절순번_문자열_변경후) Then
                    '변경후 문자열이 존재하지 않거나
                    '변경후문자열 배열크기보다 현재 어절순번이 큰 경우 (ex. 0 < 1)
                        어절_문자열_변경후 = "" '공백
                    Else
                        어절_문자열_변경후 = 배열_문자열_변경후(어절순번_문자열_변경후)
                    End If
                Loop '루프 탈출은 중간에 실시
            End If
        End If
    
        '탈출문 : Until (High < aPoint) Or (UBound(bWords) < bPoint)
        
        If (어절수_문자열_변경전 < 어절순번_문자열_변경전) Or (어절수_문자열_변경후 < 어절순번_문자열_변경후) Then
        '변경전후 둘 중 어느 한 쪽이라도 총 어절수까지 순번을 다 했으면 일단 1차 루프는 종료
            Exit Do
        End If
    
    Loop
    
    
    '2차 루프 : 나머지 처리
    
    '변경후가 남아있는 경우
    Do
        If 어절수_문자열_변경후 < 어절순번_문자열_변경후 Then
            Exit Do
        End If
        
        어절_문자열_변경후 = 배열_문자열_변경후(어절순번_문자열_변경후)
    
        '찍을 준비
        어절순번_문자열_작업결과 = 어절순번_문자열_작업결과 + 1
        ReDim Preserve 배열_문자열_작업결과(1 To 어절순번_문자열_작업결과)
        배열_문자열_작업결과(어절순번_문자열_작업결과) = 배열_문자열_변경후(어절순번_문자열_변경후) '추가대상으로서 변경후 문자열을 찍음
      
        '추가된문자열이 존재하는지 CHECK. 맨 처음에는 무조건 건드림
        If 존재여부_추가된문자열 = False Then
            ReDim 배열_추가된문자열_시작위치(1 To 1)
            ReDim 배열_추가된문자열_길이(1 To 1)
            존재여부_추가된문자열 = True
        End If
        
        어절순번_추가된문자열 = 어절순번_추가된문자열 + 1
        ReDim Preserve 배열_추가된문자열_시작위치(1 To 어절순번_추가된문자열)
        배열_추가된문자열_시작위치(어절순번_추가된문자열) = 글자수_작업결과 '취소선 시작할 위치 찍기. 글자는 무조건 0에서 시작
        
        ReDim Preserve 배열_추가된문자열_길이(1 To 어절순번_추가된문자열)
        배열_추가된문자열_길이(어절순번_추가된문자열) = Len(배열_문자열_변경후(어절순번_문자열_변경후)) '취소선 그을 글자수 찍기
        
        '위 문장보다 반드시 뒤에 와야 함!!
        글자수_작업결과 = 글자수_작업결과 + 1 + Len(어절_문자열_변경후) '글자수가 늘어남 : 기존글자수 + 1(공백, Join 고려) + 어절_문자열_변경전 글자수
        'Debug
        
        어절순번_문자열_변경후 = 어절순번_문자열_변경후 + 1
    
    Loop
    
    '나머지 변경전 처리
    Do
        If 어절수_문자열_변경전 < 어절순번_문자열_변경전 Then
            Exit Do
        End If
    
        어절_문자열_변경전 = 배열_문자열_변경전(어절순번_문자열_변경전)
    
        '찍을 준비
        어절순번_문자열_작업결과 = 어절순번_문자열_작업결과 + 1
        ReDim Preserve 배열_문자열_작업결과(1 To 어절순번_문자열_작업결과)
        배열_문자열_작업결과(어절순번_문자열_작업결과) = 배열_문자열_변경전(어절순번_문자열_변경전) '삭제대상으로서 변경전 문자열을 찍음
    
        '삭제된문자열이 존재하는지 CHECK. 맨 처음에는 무조건 건드림
        If 존재여부_삭제된문자열 = False Then
            ReDim 배열_삭제된문자열_시작위치(1 To 1)
            ReDim 배열_삭제된문자열_길이(1 To 1)
            존재여부_삭제된문자열 = True
        End If
        
        어절순번_삭제된문자열 = 어절순번_삭제된문자열 + 1
        ReDim Preserve 배열_삭제된문자열_시작위치(1 To 어절순번_삭제된문자열)
        배열_삭제된문자열_시작위치(어절순번_삭제된문자열) = 글자수_작업결과 '취소선 시작할 위치 찍기. 글자는 무조건 0에서 시작
        
        ReDim Preserve 배열_삭제된문자열_길이(1 To 어절순번_삭제된문자열)
        배열_삭제된문자열_길이(어절순번_삭제된문자열) = Len(어절_문자열_변경전) '취소선 그을 글자수 찍기
        
        '위 문장보다 반드시 뒤에 와야 함!!
        글자수_작업결과 = 글자수_작업결과 + 1 + Len(어절_문자열_변경전) '글자수가 늘어남 : 기존글자수 + 1(공백, Join 고려) + 어절_문자열_변경전 글자수
        
        어절순번_문자열_변경전 = 어절순번_문자열_변경전 + 1
        '변수가 변경됨에 따라 Loop에서 어절_문자열_변경전후는 다시 초기화됨
    
    Loop
        
    문자열_작업결과 = Join(배열_문자열_작업결과, 구분자) '전역변수로
    
End Sub

''''''''''''''''''''''''''
'전역변수 결과를 화면에 찍는 곳
''''''''''''''''''''''''''

Private Sub DisplayText() 'Delimiter는 공백으로 고정
    
    Dim i As Long '반복횟수
        
    위치_출력.Clear
        
    '작업결과 문자열 출력
    If 존재여부_문자열_작업결과 Then '작업결과가 있어야 찍음
        위치_출력.Value = 문자열_작업결과
    End If
    
    '루프 - 삭제된문자열 취소선 긋는 루프 // 삭제된문자열이 일단 존재해야 함
    If 존재여부_삭제된문자열 = False Then ' 없으면 PASS
        Debug.Print 1
    Else
        For i = 1 To UBound(배열_삭제된문자열_시작위치) '배열은 1부터
        
            With 위치_출력.Characters(배열_삭제된문자열_시작위치(i), 배열_삭제된문자열_길이(i)).Font
                .ColorIndex = 3
                .Strikethrough = True
            End With
        Next i
        Flag수정 = True '개별 셀에 대한 것
        'Debug - 일자만 변경된 경우에는 변경이 아님
        If 위치_열 <> 1 Then
            FlagModify = True '행에 대한 것
        End If
    End If
    
    '루프 - 추가된문자열 밑줄 긋는 루프 // 추가된문자열이 일단 존재해야 함
    If 존재여부_추가된문자열 = False Then
        Debug.Print 1
    Else
        For i = 1 To UBound(배열_추가된문자열_시작위치)
            
            With 위치_출력.Characters(배열_추가된문자열_시작위치(i), 배열_추가된문자열_길이(i)).Font
                .ColorIndex = 14
                .Underline = True
            End With
            
        Next i
        Flag수정 = True '개별 셀에 대한 것
        'Debug - 일자만 변경되면 변경이 아님
        If 위치_열 <> 1 Then
            FlagModify = True '행에 대한 것
        End If
    End If
    
    '위치_출력 가공
    위치_출력.WrapText = True
    
    If Flag수정 = False Then '만약 수정이 없었다면, 산출물 부분에 해당 셀은 회색칠함
        위치_출력.Interior.ColorIndex = 15
    End If
    
End Sub



